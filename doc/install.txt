Prerequisites
-------------

1. Servers running Debian linux 8 or later. You can use other distributions but that's not tested.

2. Perl interpreter.

You'll need version 5.20.2 or later on nodes running global observers and creator web application, and
version 5.8.8 or later on all other nodes. Maybe earlier versions will work too but that's not tested.

3. Nginx web server or other which supports websockets on node running creator web application.

4. Redis server, preferably version 2.8.22 or later, because earlier versions are not tested.

5. Perl modules:

JSON::XS (on every node)
Redis (on every node)
LWP (on nodes running global slack observers and creator web application)
LWP::Protocol::https (on nodes running global slack observers and creator web application)
MIME::Entity (on nodes running global mail observers)
Template (on nodes running global observers and creator web application)
Plack (on node running creator web application)
Dancer2 (on node running creator web application)
Dancer2::Plugin::Auth::HTTP::Basic::DWIW (on node running creator web application)
Dancer2::Plugin::WebSocket (on node running creator web application)
Twiggy (on node running creator web application)
CGI::Deurl::XS (on node running creator web application)
JavaScript::Duktape (on node running global observers and creator web application)
AnyEvent::RipeRedis (on node running creator web application)
AnyEvent::HTTP (on node running creator web application)
String::MkPasswd (on node running creator web application)
Authen::OATH (on node running creator web application)

If something don't work, check that all these modules are upgraded to their latest versions because
old versions are not tested.

6. For mail observer to work some mail server (exim4 for example) should be set up on node running that observer.

7. For slack creator and observer to work you should create and configure slack application on https://api.slack.com/.
You should enable incoming webhooks, interactive components, slash commands and optionally create bot user to use
all features.

Installation
------------

1. Extract distribution to '/opt/anyjob' directory. You can choose another place but then you'll have more to
configure.

2. Create configuration in separate directory inside '/opt/anyjob/etc'. You can use example configuration included
in distribution as reference. Look '/opt/anyjob/doc/config.txt' file for details.

3. Create symbolic link to this directory from '/opt/anyjob/etc/current'.

4. Create file '/opt/anyjob/NODE' with current node name inside. That is needed only on nodes running daemon, not
creator application.

5. Create templates in separate directory inside '/opt/anyjob/templates'. You can use example templates included
in distribution as reference. Look '/opt/anyjob/doc/event.txt' file for details. That is needed only on nodes
running observers and creator web application.

6. Run '/opt/anyjob/rc.anyjobd start' to start daemon. You can run '/opt/anyjob/rc.anyjobd restart' to restart daemon
and '/opt/anyjob/rc.anyjobd stop' to stop it. You should include start command into some place in your distribution
which will run on every system bootup. In Debian linux 8 it is '/etc/rc.local' file.

7. Run '/opt/anyjob/rc.anyjobc start' to start creator web application. This should be done on only one selected
node. You can run '/opt/anyjob/rc.anyjobc restart' to restart that application and '/opt/anyjob/rc.anyjobc stop'
to stop it. You should make it run on every system bootup too.

8. Configure nginx on node running creator web application to serve requests destined for it. Better use latest
version available but if it supports websockets (version 1.3.13 or later), it will suffice. You can use this
configuration as reference:

server {
    listen                          0.0.0.0;
    server_name                     <your-anyjob-domain-name>;
    access_log                      off;
    charset                         utf8;
    client_max_body_size            15m;
    root                            /opt/anyjob/web/;

    proxy_redirect                  off;
    proxy_set_header                Host $http_host;
    proxy_set_header                X-Forwarded-Host $host;
    proxy_set_header                X-Real-IP $remote_addr;
    proxy_set_header                X-Forwarded-For $proxy_add_x_forwarded_for;

    location / {
        proxy_pass                  http://127.0.0.1:8080;
    }

    location /ws {
        proxy_http_version          1.1;
        proxy_set_header            Upgrade $http_upgrade;
        proxy_set_header            Connection "upgrade";
        proxy_set_header            Host $http_host;
        proxy_set_header            X-Forwarded-Host $host;
        proxy_set_header            X-Real-IP $remote_addr;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout          86400s;
        proxy_pass                  http://127.0.0.1:8080;
    }

    location ~* \.(html|js|css)$ {
        expires                     1h;
    }

    location ~* \.(gif|png|jpg|ico|ttf|wott|wott2|eot|svg)$ {
        expires                     1y;
    }
}

Of course you can choose other web server which supports websockets or just use dancer2 web application directly
but that is not recommended in production setups.

9. Configure your slack application to use slack creator. You should set interactive components request url to
http://<your-anyjob-domain-name>/slack and slash commands request url to http://<your-anyjob-domain-name>/slack/cmd.
Of course you can use https urls if you configure ssl in nginx but that's not covered here.

Running on docker
-----------------

You can run anyjob inside docker containers. To help you get started example Dockerfile and docker-compose.yml files
are included in distribution. For details refer to docker documentation at https://docs.docker.com/.
