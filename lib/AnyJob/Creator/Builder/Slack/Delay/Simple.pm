package AnyJob::Creator::Builder::Slack::Delay::Simple;

###############################################################################
# Slack builder used to delay job or perform some operation with delayed work using slash command's text.
#
# Author:       LightStar
# Created:      06.12.2018
# Last update:  08.12.2018
#

use strict;
use warnings;
use utf8;

use JSON::XS;

use AnyJob::Constants::Delay;

use base 'AnyJob::Creator::Builder::Slack::Simple';

###############################################################################
# Handle slack slash command. Text is parsed by AnyJob::Creator::Parser module so look there for details.
# Job is delayed (or operation with delayed work is processed) only if AnyJob::Creator::Parser returns no errors
# (warnings are permitted).
#
# Arguments:
#     text        - string command text.
#     userId      - string user id.
#     responseUrl - string response url.
#     triggerId   - string trigger id.
#     userName    - string user name.
# Returns:
#     string result to show user.
#
sub command {
    my $self = shift;
    my $text = shift;
    my $userId = shift;
    my $responseUrl = shift;
    my $triggerId = shift;
    my $userName = shift;

    my ($delay, $job, $errors);
    ($delay, $job, undef, $errors) = $self->parent->parse($text, undef, { delay => 1 });
    unless (defined($delay)) {
        return 'Error: ' . (scalar(@$errors) > 0 ? $errors->[0]->{text} : 'unknown error');
    }

    unless ($self->parentAddon->checkJobAccess($userId, $job)) {
        return 'Error: access denied';
    }

    $errors = [ grep {$_->{type} eq 'error'} @$errors ];
    if (scalar(@$errors) > 0) {
        return 'Error' . (scalar(@$errors) > 1 ? 's' : '') . ': ' . join(', ', map {$_->{text}} @$errors);
    }

    if (exists(DELAY_JOB_ACTIONS()->{$delay->{action}})) {
        return $self->delayJob($delay, $job, $responseUrl, $userName);
    } elsif ($delay->{action} eq DELAY_ACTION_DELETE) {
        return $self->deleteDelayedWork($delay, $responseUrl, $userName);
    } elsif ($delay->{action} eq DELAY_ACTION_GET) {
        return $self->getDelayedWorks($delay, $responseUrl, $userName);
    }

    return 'Error: unknown error';
}

###############################################################################
# Delay job using data parsed from input arguments.
#
# Arguments:
#     delay       - hash with delay data generated by AnyJob::Creator::Parser module.
#     job         - hash with job data generated by AnyJob::Creator::Parser module.
#     responseUrl - string response url.
#     userName    - string user name.
# Returns:
#     reply string with error or success message.
#
sub delayJob {
    my $self = shift;
    my $delay = shift;
    my $job = shift;
    my $responseUrl = shift;
    my $userName = shift;

    my $error = $self->parent->delayJobs($delay, [ $job ], {
        creator      => 'slack',
        author       => $userName,
        observer     => 'slack',
        response_url => $responseUrl
    });
    if (defined($error)) {
        $self->debug('Delaying failed: ' . $error);
        return 'Error: ' . $error;
    }

    return 'Job delayed';
}

###############################################################################
# Delete delayed work using data parsed from input arguments.
#
# Arguments:
#     delay       - hash with delay data generated by AnyJob::Creator::Parser module.
#     responseUrl - string response url.
#     userName    - string user name.
# Returns:
#     reply string with error or success message.
#
sub deleteDelayedWork {
    my $self = shift;
    my $delay = shift;
    my $responseUrl = shift;
    my $userName = shift;

    $self->parent->deleteDelayedWork($delay->{id}, {
        creator      => 'slack',
        author       => $userName,
        observer     => 'slack',
        response_url => $responseUrl
    });

    return 'Delete request is sent';
}

###############################################################################
# Retrieve delayed works using data parsed from input arguments.
#
# Arguments:
#     delay       - hash with delay data generated by AnyJob::Creator::Parser module.
#     responseUrl - string response url.
#     userName    - string user name.
# Returns:
#     reply string with error or result message.
#
sub getDelayedWorks {
    my $self = shift;
    my $delay = shift;
    my $responseUrl = shift;
    my $userName = shift;

    $self->parent->getDelayedWorks('slack', $delay->{id}, {
        creator      => 'slack',
        author       => $userName,
        response_url => $responseUrl
    });

    return 'Request is sent';
}

1;
